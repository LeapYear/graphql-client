version: 2.1

aliases:
  - &param_stack_yaml
    stack_yaml:
      type: string
      default: stack.yaml
  - &param_latest
    latest:
      type: boolean
      default: false

  - &stack_cache_key
    v1-{{ checksum "stack-cache-key.txt" }}

  - &yarn_cache_key
    v0-{{ checksum "yarn-cache-key.txt" }}

executors:
  centos7:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    docker:
      - image: centos:7
    working_directory: /root/src
    shell: /bin/bash -eux -o pipefail
    environment:
      STACK_YAML: << parameters.stack_yaml >>
      CI_LATEST: <<# parameters.latest >>1<</ parameters.latest >>
      LANG: en_US.UTF-8

orbs:
  codecov: codecov/codecov@1.0.2

jobs:
  run_build_and_test:
    parameters:
      <<: [*param_stack_yaml, *param_latest]

    executor:
      name: centos7
      stack_yaml: << parameters.stack_yaml >>
      latest: << parameters.latest >>

    steps:
      # init
      - checkout
      - run:
          name: Build cache keys
          command: |
            STACK_FILES=(
              "${STACK_YAML}"
              graphql-client/package.yaml
              example/package.yaml
            )
            echo "${STACK_YAML}" > stack-cache-key.txt
            cat "${STACK_FILES[@]}" >> stack-cache-key.txt
            curl -sSL https://get.haskellstack.org/ | sed -n 's/^STACK_VERSION="\(.*\)"/\1/p' >> stack-cache-key.txt

      # install stack and dependencies
      - run:
          name: Install stack
          command: |
            curl -sSL https://get.haskellstack.org/ | sh
            stack --version
      - run:
          name: Install system dependencies
          command: yum install -y zlib-devel
      - restore_cache:
          key: *stack_cache_key
      - run:
          name: Build external dependencies
          command: |
            STACK_ARGS=(--test --only-dependencies)
            if [[ -n "${CI_LATEST}" ]]; then
                STACK_ARGS+=(--haddock)
            fi

            stack build "${STACK_ARGS[@]}"

            if [[ -n "${CI_LATEST}" ]]; then
                stack build hlint stylish-haskell
                stack install hpc-lcov --local-bin-path /usr/local/bin
            fi
      - save_cache:
          key: *stack_cache_key
          paths:
            - ~/.stack
            - .stack-work

      # build graphql-client
      - run:
          name: Build
          command: |
            STACK_ARGS=(
                --test
                --no-run-tests
            )
            if [[ -n "${CI_LATEST}" ]]; then
                STACK_ARGS+=(--coverage)
            fi

            stack build "${STACK_ARGS[@]}" --ghc-options -Werror graphql-client

      # lint
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Lint
                command: |
                  set +e
                  STATUS=0
                  scripts/hlint.sh || STATUS=1
                  scripts/stylish-haskell.sh || STATUS=1
                  exit "${STATUS}"

      # test
      - run:
          name: Test Haskell package
          command: |
            STACK_ARGS=(--test)
            if [[ -n "${CI_LATEST}" ]]; then
              STACK_ARGS+=(--coverage)
            fi
            stack build "${STACK_ARGS[@]}" graphql-client
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Convert coverage output
                command: hpc-lcov
            - codecov/upload:
                file: lcov.info
            - run:
                name: Generate hpc overlay file
                command: scripts/make_hpc_overlay.py
            - run:
                name: Convert overlay file
                command: hpc-lcov --file overlay.tix -o lcov-overlay.info
            - codecov/upload:
                file: lcov-overlay.info

      # build haddock
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Build haddock
                command: |
                  stack build --haddock graphql-client
            - run:
                name: Bundle haddock docs
                command: |
                  mkdir -p .ci/
                  tar czf .ci/haddock-docs.tar.gz -C "$(find graphql-client/.stack-work/dist -regex '.*/doc/html/[^/]*')" .
            - store_artifacts:
                path: .ci/

      # build and test graphql-client-example
      - when:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Remove old Main.mix file (LeapYear/hpc-lcov#12)
                command: find graphql-client/ -name Main.mix | xargs rm -rf
            - run:
                name: Build graphql-client-example
                command: stack build --coverage graphql-client-example
            - run:
                name: Run example
                command: stack exec graphql-client-example
            - run:
                name: Convert coverage output
                command: hpc-lcov --file graphql-client-example.tix --main-package graphql-client-example -o lcov-example-exe.info
            - codecov/upload:
                file: lcov-example-exe.info
            - run:
                name: Test graphql-client-example
                command: |
                  stack clean graphql-client-example
                  stack test --coverage graphql-client-example
            - run:
                name: Convert coverage output
                command: hpc-lcov -o lcov-example-test.info
            - codecov/upload:
                file: lcov-example-test.info
      - unless:
          condition: << parameters.latest >>
          steps:
            - run:
                name: Test graphql-client-example
                command: stack test graphql-client-example
            - run:
                name: Run example
                command: stack exec graphql-client-example

  test_node:
    executor: centos7
    steps:
      # init
      - checkout
      - run:
          name: Build cache keys
          command: |
            YARN_FILES=(
              yarn.lock
            )
            cat "${YARN_FILES[@]}" > yarn-cache-key.txt

      # install yarn and dependencies
      - run:
          name: Install yarn
          command: |
            curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
            curl --silent --location https://rpm.nodesource.com/setup_12.x | bash -
            yum install -y yarn
      - run:
          name: Install system dependencies
          command: yum install -y git
      - restore_cache:
          key: *yarn_cache_key
      - run:
          name: Install yarn dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: *yarn_cache_key
          paths:
            - node_modules

      # build
      - run:
          name: Build
          command: yarn graphql build

      # lint
      - run:
          name: Lint
          command: scripts/eslint.sh

      # test
      - run:
          name: Ensure that example API is up to date
          command: |
            yarn graphql build
            yarn example codegen
            git --no-pager diff --exit-code example/src/Example/GraphQL/API.hs
      - run:
          name: Test Node package
          command: yarn graphql test --coverage --runInBand
      - codecov/upload:
          file: graphql-codegen-haskell/coverage/coverage-final.json

workflows:
  version: 2

  build_and_test:
    jobs:
      - test_node
      - run_build_and_test:
          name: test_latest
          latest: true
      - run_build_and_test:
          name: test_ghc_<< matrix.ghc_version >>
          stack_yaml: stack-ghc-<< matrix.ghc_version>>.yaml
          matrix:
            parameters:
              ghc_version:
                - 8.2
                - 8.4
                - 8.6
                - 8.8
